import java.io.Serializable;
public class BSTree<T extends Comparable<? super T>> implements Cloneable, 
        Serializable {
    private BSTNode<T> root;
    private int treeSize;
    //Return:	A reference to the node containing item or null if the search fails
    private BSTNode<T> findNode(T item)	 {						  
        BSTNode<T> t = root;
        while(t != null) {
            int result = item.compareTo(t.value);
            if (result == 0) return t;
            else if (result < 0) t = t.left;
            else t = t.right;
        }
        return null;
    }
    public BSTree() {
        root = null;
        treeSize = 0;
    }
    public int size() {
        return treeSize;
    }
    public int height() {
        return height(root);
    }
    public int height(BSTNode node) {
        if (node== null) return 0;
        else {
            int leftHeight = height(node.left);
            int rightHeight = height(node.right);
            if(leftHeight > rightHeight) return (leftHeight + 1);
            else return (rightHeight + 1);
        }
    }
    public int findLevelOf(T item) {
        BSTNode<T> t = root;
        int level= 0;
        while(t!= null) {
            int result= item.compareTo(t.value);
            if (result== 0) return level;
            else if(result< 0) {
                t = t.left;
                level+= 1;
            }
            else {
                t = t.right;
                level+= 1;
            }
        }
        return -1;
    }
    public boolean isEmpty() {
        return treeSize == 0;
    }
    public void clear() {
        treeSize = 0;
        root = null;
    }
    //Post:	item inserted to this tree if item is not already in the tree.
    //Return:	true if item inserted to this tree; false otherwise
    public boolean add(T item) {
        BSTNode<T> t = root, parent = null;
        int result=0;
        while(t != null) {
            parent = t;
            result = item.compareTo(t.value);
            if (result == 0) return false;
            else if (result < 0) t = t.left;
            else t = t.right;
        }
        BSTNode<T> newNode= new BSTNode<>(item, parent);
        if(parent== null) root= newNode;
        else if(result< 0) parent.left= newNode;
        else parent.right= newNode;
        treeSize++;
        return true;
    }
    public boolean contains(Object item) {
        BSTNode<T> t = findNode((T)item);	
        return (t!= null);
    }
    public void inorderOutput() {
        inorder(root);		
    }
    private void inorder(BSTNode<T> t) {
        if (t != null) {
            inorder(t.left);		
            System.out.print(t.value + " ");  			
            inorder(t.right);	
        }
    }
    public Object clone() {
    BSTree<T> copy = null;
        try {
            copy = (BSTree<T>)super.clone();
        }
        catch (CloneNotSupportedException cnse) { 
        }
        copy.root = copyTree(root);
        return copy;
    }
    //Desc: 	Make a copy of a BSTree
    //Pre: 	t points to a BSTree
    //Return:A BSTree that is an exact copy of the one pointed to by t
    private BSTNode<T> copyTree(BSTNode<T> t) {
        if (t == null) return null;
        BSTNode<T> left = copyTree(t.left);
        BSTNode<T> right = copyTree(t.right);
        BSTNode<T> copyRoot = new BSTNode<>(t.value, null);
        copyRoot.left= left;
        copyRoot.right= right;
        if(left!= null) left.parent= copyRoot;
        if(right!= null) right.parent= copyRoot;
        return copyRoot;
    }
    public boolean remove(Object item) {
        BSTNode<T> t  = findNode((T)item);
        if (t == null) return false;
        removeNode(t);
        treeSize--;
        return true;
    }
    private void removeNode(BSTNode<T> D) {
        BSTNode<T> pOfD=D.parent;
        BSTNode<T> R;
        BSTNode<T> pOfR;
        if ((D.left == null) && (D.right == null))
            R = null;						
        else if ((D.left == null) && (D.right != null)) {
            R = D.right;					
            R.parent = pOfD;					 
        }							
        else if ((D.left != null) && (D.right == null)) {
            R = D.left;					
            R.parent = pOfD;					
        }							
        else if (D.right.left== null) {						
            R = D.right;				
            R.left = D.left;				
            R.parent = pOfD;					
            D.left.parent = R;					
        }							
        else {
            pOfR = D;				
            R = D.right;				
            while(R.left != null) {					
                pOfR = R;			 
                R = R.left;			 
            }					
            pOfR .left = R.right;			
            if (R.right != null) R.right.parent = pOfR;		
            R.left = D.left;				
            R.right = D.right;				
            R.parent = pOfD;				
            R.left.parent = R;				
            R.right.parent = R;			
        }						
        if (pOfD == null) root = R;
        else if ((D.value).compareTo(pOfD.value)<0)
        pOfD.left = R;				
        else pOfD.right = R;
    }
}
